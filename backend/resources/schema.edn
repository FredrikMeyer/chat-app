{:objects
 {:tick
  {
   :description "A subscription response."
   :fields {:time_ms {:type String
                      :description "Time when tick is emittied (as string-ified long milliseconds since epoch)."
                      :resolve :tick/time-ms}
            :count {:type Int
                    :descripion "Countdown on number of ticks after this one (e.g., 0 is the last tick before the subscription closes)."}}}
  :Message
  {
   :description "A message from a user"
   :fields {
            :from {:type String
                   }
            :message {:type String
                      }
            :id {:type Float}
            }}
  }
 :queries
 {
  :hello
  {
   :description "Simplest possible query."
   :type String
   :resolve :query/hello
   }
  :getRedisKey
  {
   :type String
   :resolve :query/get-key
   }
  }

 :mutations
 {
  :postMessage
  {
   :type :Message
   :description "Post a new message"
   :args
   {
    :from {
           :type String
           }
    :message {
              :type String
              }
    }
   :resolve :mutation/post-message!
   }
  :setVarRedis
  {
   :type String
   :args
   {
    :value {
            :type String
            }
    }
   :resolve :mutation/set-redis-var!
   }
  }

 :subscriptions
 {
  :ticks {:type :tick
          :args {:count {:type Int
                         :default-value 5
                         :description "Number of ticks to send via subscription."}}
          :stream :subscriptions/ticks
          }
  :messages {:type :Message
             :stream :subscriptions/messages
             }
  }
 }
 
 

